heat_template_version: 2015-04-30

description: Sets up a wordpress server

parameter_groups:
  - label: Other
    description: Other parameters
    parameters:
    - title
    - multi_site
    - admin-user
    - admin-password
    - admin-email
    - flavor
    - image
    - key
    - ssh_cidr
    - volume_name
    - volume_size
    - private_network
    - public_network
parameters:
  title:
    type: string
    label: Wordpress site name
    description: Name of the Wordpress site. This will be visible on your new site, it can be changed later if needed.
    default: "CC User Wordpress site"
  admin-user:
    type: string
    label: Admin username
    description: The account name of the wordpress site administrator. Please do not use common administrator account names such as "Admin". If you try to login 2 or more times within 10 minutes with a non-existent username you will be banned from accessing your wordpress site for a period of 10 minutes.
  admin-password:
    type: string
    label: Admin passphrase
    description: The passphrase for the administrator account. It must be at least 16 characters long to a maximum of 32 characters. It can contain upper and lower case letters, numbers, and spaces. If you incorrectly enter your password 6 or more times within 10 minutes when logging into your Wordpress site you will be banned for a period of 10 minutes from accessing your wordpress site.
    hidden: true
    constraints:
      - length: {min: 16, max: 32 }
        description: Password length must be between 16 and 32 characters.
      - allowed_pattern: '[a-zA-Z0-9 ]+'
        description: Password must contain only letters and numbers.
  admin-email:
    type: string
    label: Admin email
    description: Email for site administrator
    constraints:
      - allowed_pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        description: Must be a valid email
  multi_site:
    type: boolean
    label: Multi-site
    description: Allow multple distinct wordpress sites. If you do not need multi-site support you are strongly encouraged not to check this box.
    default: false
  flavor:
    type: string
    label: Flavor
    description: Hardware flavor to be used for the server,  it is best to select a flavor starting with a "p" for persistent
    constraints:
      - custom_constraint: nova.flavor
  image:
    type: string
    label: Image
    description: Base image to use to install wordpress on, it is best to select "Ubuntu-16.04.2-Xenial-x64-2017-07" others may work but haven't been tested.
    constraints:
      - custom_constraint: glance.image
  key:
    type: string
    label: Key-pair name
    description: Name of a previously generated key-pair in OpenStack to be used when connecting to the server via SSH to perform maintance tasks.
    constraints:
      - custom_constraint: nova.keypair
  ssh_cidr:
    type: string
    label: IP range to allow SSH from, in CIDR format.
    description: >-
      This restricts who can access the VM via SSH. The IP range is given using CIDR notation. This site http://ipv4.icanhazip.com/ will show your current IPv4 address. To construct a valid CIDR rule restricting access only to your current IP add "/32" to the end of your IP. The default value will restrict access from any outside addresses. This security rule can be updated later via the OpenStack dashboard: "Compute"->"Access & Security"->"wordpress_security"->"Manage Rules" in case your IP changes or you left the default value and later require access to the VM via SSH.
    default: 127.0.0.1/32
    constraints:
      - allowed_pattern: '^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$'
        description: Must be a valid CIDR value. See https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing.
  volume_name:
    type: string
    label: Volume Name
    default: wordpress_root
    description: Name of the volume to boot from. A new volume will be created.
  volume_size:
    type: number
    label: Volume Size
    default: 20
    description: Size of the volume in GB
  private_network:
    type: string
    label: Private network name or ID
    description: Network to attach instance to.
    constraints:
      - custom_constraint: neutron.network
  public_network:
    type: string
    description: Network to use for obtaining public IP (VLAN3337 for west-cloud, net04_ext for east-cloud)
    label: Public Network
    default: net04_ext
    constraints:
      - allowed_values:
        - VLAN3337
        - net04_ext
resources:
  wordpress-server:
    type: OS::Nova::Server
    properties:
      flavor: {get_param: flavor}
      key_name: {get_param: key}
      name: wordpress-server
      block_device_mapping: [{device_name: "vda", volume_id: {get_resource: wordpress_volume}, delete_on_termination: "false"}]
      networks:
        - port: {get_resource: wordpress_port}
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #cloud-config
            package_update: true
            package_upgrade: true
            packages:
              - apache2
              - mysql-server
              - php
              - php-dev
              - libapache2-mod-php
              - php-mcrypt
              - php-mysql
              - php-curl
              - php-gd
              - php-mbstring
              - php-xml
              - php-xmlrpc
              - libssh2-1-dev
              - php-fpm
              - fail2ban
              - software-properties-common
            write_files:
              - content: |
                  #!/bin/bash
                  
                  WP_ADMIN_USER="ADMINUSERNAME"
                  WP_ADMIN_PASSWD="ADMINUSERPASS"
                  WP_ADMIN_EMAIL="ADMINUSEREMAIL"
                  WP_TITLE="SITETITLE"
                  
                  #use this version of ssh2 for php, the 
                  #php-ssh2 package doesn't seem to work, there is a known bug with it.
                  echo "using pecl to install ssh2-1.1.2 ..."
                  pecl install ssh2-1.1.2
                  
                  #add extension to php.ini
                  echo "adding php-ssh2 extension to php.ini ..."
                  echo "extension=ssh2.so">>/etc/php/7.0/apache2/php.ini
                  
                  echo "making DB_PASSWORD ..."
                  DB_PASSWORD=$(tr -dc _A-Za-z0-9 < /dev/urandom | head -c16) # Generate a random password
                  DB_NAME="wordpress"
                  DB_USER="wordpress"
                  DB_HOST=localhost
                  
                  echo "getting latest wordpress ..."
                  TMP_DIR=/tmp
                  wget http://wordpress.org/latest.tar.gz -O $TMP_DIR/latest.tar.gz
                  echo "untarring wordpress ..."
                  tar xzf $TMP_DIR/latest.tar.gz -C $TMP_DIR
                  
                  # create the database, and configure the wordpress user.
                  echo "configuring database ..."
                  mysql <<EOF
                  CREATE DATABASE $DB_NAME;
                  GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER
                  ON $DB_NAME.*
                  TO $DB_USER@$DB_HOST
                  IDENTIFIED BY '$DB_PASSWORD';
                  FLUSH PRIVILEGES;
                  EOF
                  
                  # copy the config file and then configure database name, username, and password
                  echo "editing the wordpress configuration ..."
                  cp $TMP_DIR/wordpress/wp-config-sample.php $TMP_DIR/wordpress/wp-config.php
                  sed -i "s/database_name_here/$DB_NAME/g" $TMP_DIR/wordpress/wp-config.php
                  sed -i "s/password_here/$DB_PASSWORD/g" $TMP_DIR/wordpress/wp-config.php
                  sed -i "s/username_here/$DB_USER/g" $TMP_DIR/wordpress/wp-config.php
                  
                  # configure security keys : https://codex.wordpress.org/Editing_wp-config.php#Security_Keys
                  echo "configuring wordpress security keys ..."
                  for i in $(seq 1 8)
                  do
                    key=$(tr -dc _A-Za-z0-9 < /dev/urandom | head -c64)
                    sed -i "0,/put your unique phrase here/s/put your unique phrase here/$key/" $TMP_DIR/wordpress/wp-config.php
                  done
                  
                  #create a user to manage (update/install plugins) for wordpress
                  echo "creating user, wp-user, to manage updating/installing plugins for wordpress ..."
                  adduser --disabled-password wp-user << EOF
                  wp-user
                  
                  
                  
                  Y
                  EOF
                  
                  #add wp-user to www-data group
                  adduser wp-user www-data
                  
                  #
                  ##setup ssh keys for wp-user
                  echo "setting up wp-user ssh keys ..."
                  su - wp-user -c "ssh-keygen -t rsa -b 4096 << EOF
                  /home/wp-user/wp_rsa
                  
                  EOF"
                  
                  chown wp-user:www-data /home/wp-user/wp_rsa*
                  chmod 0640 /home/wp-user/wp_rsa*
                  mkdir /home/wp-user/.ssh
                  chown wp-user:wp-user /home/wp-user/.ssh/
                  chmod 0700 /home/wp-user/.ssh/
                  echo "from=127.0.0.1">/home/wp-user/.ssh/authorized_keys
                  cat /home/wp-user/wp_rsa.pub >>/home/wp-user/.ssh/authorized_keys
                  chown wp-user:wp-user /home/wp-user/.ssh/authorized_keys
                  chmod 0644 /home/wp-user/.ssh/authorized_keys
                  
                  #configure wp to use ssh for updates and plugin installation
                  echo "configuring wordpress to use ssh for updates and installs ..."
                  echo "define('FTP_PUBKEY','/home/wp-user/wp_rsa.pub');">>$TMP_DIR/wordpress/wp-config.php
                  echo "define('FTP_PRIKEY','/home/wp-user/wp_rsa');">>$TMP_DIR/wordpress/wp-config.php
                  echo "define('FTP_USER','wp-user');">>$TMP_DIR/wordpress/wp-config.php
                  echo "define('FTP_PASS','');">>$TMP_DIR/wordpress/wp-config.php
                  echo "define('FTP_HOST','127.0.0.1:22');">>$TMP_DIR/wordpress/wp-config.php
                  
                  echo "moving install from $TMP_DIR/wordpress/ to /var/www/html/ ..."
                  rm /var/www/html/index.html
                  mv $TMP_DIR/wordpress/* /var/www/html/
                  
                  #make wp-user owner of wp-site
                  echo "setting permissions on files/directories in /var/www/html ..."
                  chown -R wp-user:www-data /var/www/html
                  chmod u=rwX,g=rX,o=rX -R /var/www/html
                  find /var/www/html -type d -exec echo chmod u+s,g+s {} \;
                  chmod o-rx /var/www/html/wp-config.php
                  
                  #install wp-cli
                  echo "installing wp-cli ..."
                  curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
                  chmod +x wp-cli.phar
                  mv wp-cli.phar /usr/local/bin/wp
                  
                  systemctl restart apache2
                  
                  #do initial setup of wordpress
                  echo "performing initial setup of wordpress site ..."
                  su - wp-user -c "cd /var/www/html;wp core install --url=https://$(curl http://icanhazptr.com/) --title='$WP_TITLE' --admin_user='$WP_ADMIN_USER' --admin_password='$WP_ADMIN_PASSWD' --admin_email='$WP_ADMIN_EMAIL'"
                  
                  #install plugin to log wordpress authentication attempts
                  echo "installing wordpress fail2ban plugin ..."
                  su - wp-user -c "cd /var/www/html; wp plugin install wp-fail2ban; wp plugin activate wp-fail2ban"
                  
                  #install wordfence?
                  echo "installing wordpress wordfence plugin ..."
                  su - wp-user -c "cd /var/www/html; wp plugin install wordfence; wp plugin activate wordfence"
                  sed -i "s/auto_prepend_file =/auto_prepend_file = '/var/www/html/wordfence-waf.php'/g" /etc/php/7.0/apache2/php.ini
                  #modify permissions to allow wordfence plugin to write to wflogs
                  chown wp-user:www-data /var/www/html/wp-content/wflogs
                  chmod g+w,g+s /var/www/html/wp-content/wflogs
                  
                  #install fail2ban wordpress filters
                  cp /var/www/html/wp-content/plugins/wp-fail2ban/filters.d/wordpress-hard.conf /etc/fail2ban/filter.d/
                  cp /var/www/html/wp-content/plugins/wp-fail2ban/filters.d/wordpress-soft.conf /etc/fail2ban/filter.d/
                  echo "[wordpress-hard]">/etc/fail2ban/jail.d/wordpress.conf
                  echo "enabled = true">>/etc/fail2ban/jail.d/wordpress.conf
                  echo "filter = wordpress-hard">>/etc/fail2ban/jail.d/wordpress.conf
                  echo "logpath = /var/log/auth.log">>/etc/fail2ban/jail.d/wordpress.conf
                  echo "maxretry = 2">>/etc/fail2ban/jail.d/wordpress.conf
                  echo "port = http,https">>/etc/fail2ban/jail.d/wordpress.conf
                  echo "">>/etc/fail2ban/jail.d/wordpress.conf
                  echo "[wordpress-soft]">>/etc/fail2ban/jail.d/wordpress.conf
                  echo "enabled = true">>/etc/fail2ban/jail.d/wordpress.conf
                  echo "filter = wordpress-soft">>/etc/fail2ban/jail.d/wordpress.conf
                  echo "logpath = /var/log/auth.log">>/etc/fail2ban/jail.d/wordpress.conf
                  echo "maxretry = 5">>/etc/fail2ban/jail.d/wordpress.conf
                  echo "port = http,https">>/etc/fail2ban/jail.d/wordpress.conf
                  
                  #turn off repeated message reduction
                  #wondering if there is an error with this line, getting:
                  #206.167.181.182
                  sed -i "s/$RepeatedMsgReduction on/$RepeatedMsgReduction off/g" /etc/rsyslog.conf
                  
                  service rsyslog restart
                  service fail2ban restart
                  
                  #Multi-site?
                  if [ MULTISITESETUP = "True" ]; then
                    echo "Configuring for multi-site Wordpress ..."
                    echo "  Installing and configuring sendmail ..."
                    #install sendmail, which is required to have users setup and create their own wordpress sites
                    apt-get install sendmail -y
                    
                    #To enable sendmail to use STARTTLS, you need to:
                    #1) Add this line to /etc/mail/sendmail.mc and optionally
                    #   to /etc/mail/submit.mc:
                    #  include(`/etc/mail/tls/starttls.m4')dnl
                    echo "include(\`/etc/mail/tls/starttls.m4')dnl" >>/etc/mail/sendmail.mc
                    echo "include(\`/etc/mail/tls/starttls.m4')dnl" >>/etc/mail/submit.mc
                    
                    #sudo sendmailconfig (answer 'Y' to all questions)
                    sendmailconfig<<EOF
                  Y
                  Y
                  Y
                  EOF
                    
                    service sendmail restart
                    
                    #these need to be run as wp-user
                    su - wp-user -c "cd /var/www/html;wp plugin deactivate --all"
                    su - wp-user -c "cd /var/www/html;wp core multisite-install --title='$WP_TITLE' --admin_email='$WP_ADMIN_EMAIL'"
                    
                    #
                    #need to have apache rewrite module enabled
                    a2enmod rewrite
                    
                    #
                    #sudo vim /etc/apache2/apache2.conf
                    #set AllowOverride to ALL for document root
                    #this allows the provided .htaccess file from wordpress to be applied
                    perl -i -0pe 's~<Directory /var/www/>\n\tOptions Indexes FollowSymLinks\n\tAllowOverride None\n~<Directory /var/www/>\n\tOptions Indexes FollowSymLinks\n\tAllowOverride ALL\n~' /etc/apache2/apache2.conf
                    
                    #sudo vim /var/www/html/wp-config.php
                    #add the line
                    #define( 'WP_ALLOW_MULTISITE', true );
                    perl -i -0pe "s~define\('WP_DEBUG', false\);\r\n~define('WP_DEBUG', false);\r\ndefine( 'WP_ALLOW_MULTISITE', true );\r\ndefine('MULTISITE', true);\r\ndefine('SUBDOMAIN_INSTALL', false);\r\ndefine('DOMAIN_CURRENT_SITE', '$(curl icanhazptr.com)');\r\ndefine('PATH_CURRENT_SITE', '/');\r\ndefine('SITE_ID_CURRENT_SITE', 1);\r\ndefine('BLOG_ID_CURRENT_SITE', 1);~" /var/www/html/wp-config.php
                    
                    #create .htaccess file
                    echo -e 'RewriteEngine On\nRewriteBase /\nRewriteRule ^index\.php$ - [L]\n\n# add a trailing slash to /wp-admin\nRewriteRule ^([_0-9a-zA-Z-]+/)?wp-admin$ $1wp-admin/ [R=301,L]\n\nRewriteCond %{REQUEST_FILENAME} -f [OR]\nRewriteCond %{REQUEST_FILENAME} -d\nRewriteRule ^ - [L]\nRewriteRule ^([_0-9a-zA-Z-]+/)?(wp-(content|admin|includes).*) $2 [L]\nRewriteRule ^([_0-9a-zA-Z-]+/)?(.*\.php)$ $2 [L]\nRewriteRule . index.php [L]'>/var/www/html/.htaccess
                    
                    su - wp-user -c "cd /var/www/html;wp plugin activate wordfence"
                    su - wp-user -c "cd /var/www/html;wp plugin activate wp-fail2ban"
                  fi
                  
                  #disable use of xmlrpc multi call function to amplify brute force attempts
                  #this causes problems with wp cli, so must be done after all the wp cli stuff is done
                  echo "add_filter('xmlrpc_enabled', '__return_false');">>/var/www/html/wp-config.php
                  
                  systemctl restart apache2
                  
                  #install certbot (nice to have later when adding own SSL certs)
                  add-apt-repository ppa:certbot/certbot
                  apt-get update
                  apt-get install -y python-certbot-apache
                  
                path: /tmp/bootstrap-wp.sh
                permissions: "0750"
              - content: |
                  #!/bin/bash
                  wc_notify --data-binary '{"status": "SUCCESS", "reason": "wordpress server CI done"}'
                path: /tmp/finished.sh
                permissions: "0750"
            runcmd:
              #the below few lines might need some modifications e.g. maybe curl icanhazptr.com
              - echo "$(curl ipv4.icanhazip.com) $(curl icanhazptr.com) $(cat /etc/hostname)">>/etc/hosts
              - ["cd","/tmp"]
              - ["git","clone","https://github.com/cgeroux/heat-wordpress.git"]
              - ["/tmp/heat-wordpress/self-signed-ssl-setup.py","SERVERADDRESS"]
              - bash /tmp/bootstrap-wp.sh
              - ["add-apt-repository","ppa:certbot/certbot"]
              - ["apt-get","update"]
              - ["apt-get","install","python-certbot-apache"]
              - bash /tmp/finished.sh
          params:
            ADMINUSERNAME: {get_param: admin-user}
            ADMINUSERPASS: {get_param: admin-password}
            SERVERADDRESS: { get_attr: [ wordpress_floating_ip, floating_ip_address ] }
            ADMINUSEREMAIL: {get_param: admin-email}
            SITETITLE: {get_param: title}
            MULTISITESETUP: {get_param: multi_site}
            wc_notify: {get_attr: ['wordpress_wait_handle','curl_cli']}
  wordpress_port:
    type: OS::Neutron::Port
    properties:
      network: {get_param: private_network}
      security_groups: [{get_resource: wordpress_security},default]
  wordpress_security:
    type: OS::Neutron::SecurityGroup
    properties:
      name: wordpress_security
      rules:
        #maybe we don't really even need to open port 22? I suppose updates will
        #have to be done at some point. Probably should open port 22 to a CIDR 
        #that will manage the VM. Make that CIDR a heat template option.
        - remote_ip_prefix: {get_param: ssh_cidr}
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 80
          port_range_max: 80
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 443
          port_range_max: 443
  wordpress_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      port_id: {get_resource: wordpress_port}
      floating_network: {get_param: public_network}
  wordpress_wait_handle:
    type: OS::Heat::WaitConditionHandle
  wordpress_wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: {get_resource: wordpress_wait_handle}
      count: 1
      timeout: 1200
  wordpress_volume:
    type: OS::Cinder::Volume
    properties:
      size: {get_param: volume_size}
      image: {get_param: image}
      name: {get_param: volume_name}
outputs:
  public_ip:
    description: Floating IP address of server, can be used to ssh into server
    value: { get_attr: [ wordpress_floating_ip, floating_ip_address ] }
  wordpress-url:
    description: Link to wordpress site
    value:
      str_replace:
        template: http://<hostip>
        params:
          <hostip>: { get_attr: [ wordpress_floating_ip, floating_ip_address ] }
